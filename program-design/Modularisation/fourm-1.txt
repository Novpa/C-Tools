Selamat Siang Bapak,

Baik, berikut adalah saya cantumkan beberapa sumber yang saya dapatkan di internet :
1. (Tujuan dan manfaat Modularisasi) https://medium.com/arkatama/manfaat-pendekatan-modul-dalam-pengembangan-software-49fd17182bb8

2. (Kesalahan dalam Modularisasi) https://moutjs.com/how-to-avoid-common-mistakes-when-working-with-modules/

Berikut adalah tujuan dari Modularisasi:
1. Modularisasi memisahkan kode yang kompleks menjadi modul-modul yang lebih kecil dan lebih mudah dipahami. Setiap modul biasanya menangani satu tugas atau fungsionalitas tertentu.

2. Membuat kode yang dapat digunakan kembali di berbagai bagian aplikasi atau proyek lain, sehingga mengurangi duplikasi kode dan meningkatkan efisiensi.

3. Mempermudah pemeliharaan kode dengan membuat setiap modul bertanggung jawab atas satu fungsionalitas atau tugas spesifik.

4. Memungkinkan beberapa pengembang bekerja secara paralel pada modul-modul yang berbeda tanpa saling mengganggu.

5. Mengurangi duplikasi kode dengan memisahkan fungsionalitas yang umum ke dalam modul yang dapat digunakan kembali.

6. Pengujian unit (unit testing) secara independen untuk setiap modul.

7. Modularisasi memungkinkan aplikasi untuk tumbuh lebih besar dan lebih kompleks dengan tetap menjaga struktur kode yang terorganisir.

8. Memisahkan detail implementasi (abstraksi) dari bagaimana fungsionalitas itu digunakan (enkapsulasi), sehingga pengguna modul tidak perlu mengetahui detail implementasi internal.

9. Modul yang dibuat dalam satu proyek bisa digunakan kembali di proyek lain tanpa perubahan signifikan.




Berikut adalah Manfaat dari Modularisasi:
1. Pemisahan Tugas
Memudahkan pengembang untuk fokus pada area tertentu dan meningkatkan efisiensi pengembangan.

2. Reusability
Menghemat waktu dan usaha pengembangan, serta meningkatkan konsistensi dalam kode.

3. Keterbacaan & Pemeliharaan kode
Modul memecah kode menjadi unit-unit yang lebih kecil dan terstruktur, sehingga memudahkan pemahaman dan pemeliharaan kode. Perubahan atau perbaikan dapat dilakukan pada modul tertentu tanpa mempengaruhi keseluruhan sistem. Modul memungkinkan pemisahan tanggung jawab antara berbagai komponen dalam perangkat lunak. Setiap modul memiliki fungsionalitas dan tugas tertentu, memudahkan pengembang untuk fokus pada area tertentu dan meningkatkan pemahaman tentang kode.

4. Skalabilitas
Modul memungkinkan sistem untuk dengan mudah ditingkatkan atau diperluas sesuai kebutuhan bisnis. Modul baru dapat ditambahkan atau modul yang ada dapat dimodifikasi tanpa mengganggu seluruh sistem. Selain itu, dengan adanya modul manufaktur, perusahaan dapat mengintegrasikan berbagai aspek yang terkait dengan produksi, mulai dari perencanaan produk, pengendalian bahan baku, kontrol produksi, evaluasi kualitas, koordinasi proses kerja, hingga perkiraan produk yang akan diproduksi.

5. Pengujian yang Effisien
Pengujian merupakan bagian penting dalam pengembangan perangkat lunak. Salah satu keuntungan penggunaan modul dalam pengembangan perangkat lunak adalah kemampuan untuk menguji setiap modul secara terpisah. Ini berarti setiap modul dapat diuji secara individual tanpa harus melibatkan seluruh sistem atau modul lainnya. Modul dapat diuji secara terpisah, sehingga memungkinkan pengujian yang lebih fokus dan efisien. Hal ini mempermudah menjaga kualitas keseluruhan sistem dan mencegah kemungkinan adanya bug baru akibat perubahan yang dilakukan.

6. Kolaborasi Team
Modul memfasilitasi kerja tim, di mana anggota tim dapat bekerja pada modul-modul yang berbeda secara independen. Hal ini meningkatkan kemampuan untuk bekerja secara paralel dan mempercepat waktu penyelesaian proyek. Selain itu, setiap modul beroperasi secara independen dan dapat dikembangkan secara terpisah. Anggota tim dapat memilih modul yang sesuai dengan keahlian atau minat mereka dan bekerja pada modul tersebut tanpa bergantung pada kemajuan atau pekerjaan modul lainnya. Hal ini memungkinkan anggota tim untuk fokus pada tugas mereka tanpa mengalami gangguan atau ketergantungan pada anggota tim lainnya.

7. Kontrol yang lebih baik
Modul memungkinkan pengembang memiliki kontrol yang lebih baik terhadap fungsionalitas dan kinerja sistem. Masing-masing modul dapat dioptimalkan secara terpisah untuk mencapai hasil yang diinginkan. Modul ini menyediakan sistem yang terintegrasi, membuat kerja divisi IT menjadi lebih efektif dan transparan. Pengelolaan produksi, pengendalian inventaris, dan pelaporan dapat dilakukan dengan lebih mudah dan terstruktur. Perusahaan juga dapat memantau dan menganalisis data produksi secara real-time, sehingga dapat mengambil keputusan yang lebih baik dan cepat.

8. Kesalahan yang Terisolasi
Dalam pengembangan modular, kesalahan atau masalah yang terjadi biasanya terisolasi pada modul tertentu. Hal ini memudahkan identifikasi, debugging, dan perbaikan masalah tanpa harus mempengaruhi keseluruhan sistem. Modul dapat diuji secara terpisah, memungkinkan pengujian yang lebih fokus pada setiap modul. Hal ini membantu dalam identifikasi dan perbaikan kesalahan dengan lebih cepat dan efisien, serta meminimalkan dampak kesalahan pada modul lainnya.

Berikut adalah kesalahan yang biasa terjadi saat melakukan Modularisasi :
1. Menggunakan variabel global untuk menyimpan data yang seharusnya dikapsulkan dalam modul. Ini dapat menyebabkan hasil yang tidak dapat diprediksi dan membuat debugging sulit.

2. Membuat dependensi siklik antar modul, yang bisa menyebabkan masalah seperti kesalahan runtime atau pemuatan modul yang tidak benar.

3.  Menggabungkan banyak tugas dalam satu modul, yang membuat pemeliharaan dan pengujian menjadi sulit.

4. Menggunakan versi modul yang tidak kompatibel, yang dapat menyebabkan konflik dan kerusakan aplikasi. 

5. Mengabaikan pengujian modul, yang menyebabkan bug sulit terdeteksi dan diperbaiki.


Menurut saya, modularisasi yang baik adalah kunci untuk menciptakan aplikasi yang terstruktur, mudah dipelihara, dan efisien. Setiap modul harus mengikuti Single Responsibility Principle (SRP) agar fokus pada satu fungsi spesifik, sehingga mudah dipahami dan diubah tanpa mempengaruhi bagian lain. Saya juga menghindari dependensi siklik dengan memisahkan logika umum ke modul terpisah, serta memastikan modularisasi tidak berlebihan agar tidak membebani kinerja aplikasi.

